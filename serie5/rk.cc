/* translation of file(s)
	"abstract.k"
	"unparse.k"
 */
/* generated by:
 *  @(#)$Author: Kimwitu++ version 2.3.13 (C) 1998-2008 Humboldt-Universitaet zu Berlin $
 */
#define KC_REWRITE

#include <stdio.h>
#include <sys/types.h>
#include <stdlib.h>
#include "k.h"
#include "rk.h"


namespace kc {
base_rview_class base_rview;

impl_rviews rviews[] = {
    {"base_rview",&base_rview},
    {0,0}
};

} // namespace kc

namespace kc {

#ifndef KC_TRACE_PROVIDED
#define KC_TRACE_PROVIDED(COND,FILE,LINE,NODE) COND
#endif
#ifndef KC_TRACE_REWRITE_MATCH
#define KC_TRACE_REWRITE_MATCH(VIEW,FILE,LINE,NODE)
#endif
#ifndef KC_TRACE_REWRITE_RESULT
#define KC_TRACE_REWRITE_RESULT(VIEW,FILE,LINE,NODE)
#endif

module impl_module_Module::rewrite(rview kc_current_view_base)
{
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    block l_block_1 =
	block_1->rewrite(kc_current_view_base);
    if ((l_casestring_1 == casestring_1) &&  (l_block_1 == block_1))
	return this;
    else {
	impl_module_Module* kc_result= Module(l_casestring_1, l_block_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

block impl_block_Block::rewrite(rview kc_current_view_base)
{
    declaration_list l_declaration_list_1 =
	declaration_list_1->rewrite(kc_current_view_base);
    statement_sequence l_statement_sequence_1 =
	statement_sequence_1->rewrite(kc_current_view_base);
    if ((l_declaration_list_1 == declaration_list_1) &&  (l_statement_sequence_1 == statement_sequence_1))
	return this;
    else {
	impl_block_Block* kc_result= Block(l_declaration_list_1, l_statement_sequence_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

declaration_list impl_declaration_list::rewrite(rview kc_current_view_base)
{
    if (is_nil()) {
	return this;
    } else { // not Nil, Cons
	declaration l_declaration_1 =
	    declaration_1->rewrite(kc_current_view_base);
	declaration_list l_declaration_list_1 =
	    declaration_list_1->rewrite(kc_current_view_base);
	if ((l_declaration_1 == declaration_1) &&  (l_declaration_list_1 == declaration_list_1))
	    return this;
	else {
	    impl_declaration_list* kc_result= Consdeclaration_list(l_declaration_1, l_declaration_list_1);
	    kc_result->rewrite_members(this);
	    return kc_result;
	}   }
}

declaration impl_declaration_ProcedureDeclaration::rewrite(rview kc_current_view_base)
{
    procedure_declaration l_procedure_declaration_1 =
	procedure_declaration_1->rewrite(kc_current_view_base);
    if ((l_procedure_declaration_1 == procedure_declaration_1))
	return this;
    else {
	impl_declaration_ProcedureDeclaration* kc_result= ProcedureDeclaration(l_procedure_declaration_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

declaration impl_declaration_VariableDeclarationList::rewrite(rview kc_current_view_base)
{
    variable_declaration_list l_variable_declaration_list_1 =
	variable_declaration_list_1->rewrite(kc_current_view_base);
    if ((l_variable_declaration_list_1 == variable_declaration_list_1))
	return this;
    else {
	impl_declaration_VariableDeclarationList* kc_result= VariableDeclarationList(l_variable_declaration_list_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

declaration impl_declaration_TypeDeclarationList::rewrite(rview kc_current_view_base)
{
    type_declaration_list l_type_declaration_list_1 =
	type_declaration_list_1->rewrite(kc_current_view_base);
    if ((l_type_declaration_list_1 == type_declaration_list_1))
	return this;
    else {
	impl_declaration_TypeDeclarationList* kc_result= TypeDeclarationList(l_type_declaration_list_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

declaration impl_declaration_ConstantDeclarationList::rewrite(rview kc_current_view_base)
{
    constant_declaration_list l_constant_declaration_list_1 =
	constant_declaration_list_1->rewrite(kc_current_view_base);
    if ((l_constant_declaration_list_1 == constant_declaration_list_1))
	return this;
    else {
	impl_declaration_ConstantDeclarationList* kc_result= ConstantDeclarationList(l_constant_declaration_list_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

constant_declaration_list impl_constant_declaration_list::rewrite(rview kc_current_view_base)
{
    if (is_nil()) {
	return this;
    } else { // not Nil, Cons
	constant_declaration l_constant_declaration_1 =
	    constant_declaration_1->rewrite(kc_current_view_base);
	constant_declaration_list l_constant_declaration_list_1 =
	    constant_declaration_list_1->rewrite(kc_current_view_base);
	if ((l_constant_declaration_1 == constant_declaration_1) &&  (l_constant_declaration_list_1 == constant_declaration_list_1))
	    return this;
	else {
	    impl_constant_declaration_list* kc_result= Consconstant_declaration_list(l_constant_declaration_1, l_constant_declaration_list_1);
	    kc_result->rewrite_members(this);
	    return kc_result;
	}   }
}

constant_declaration impl_constant_declaration_ConstantDeclaration::rewrite(rview kc_current_view_base)
{
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_casestring_1 == casestring_1) &&  (l_expression_1 == expression_1))
	return this;
    else {
	impl_constant_declaration_ConstantDeclaration* kc_result= ConstantDeclaration(l_casestring_1, l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

type_declaration_list impl_type_declaration_list::rewrite(rview kc_current_view_base)
{
    if (is_nil()) {
	return this;
    } else { // not Nil, Cons
	type_declaration l_type_declaration_1 =
	    type_declaration_1->rewrite(kc_current_view_base);
	type_declaration_list l_type_declaration_list_1 =
	    type_declaration_list_1->rewrite(kc_current_view_base);
	if ((l_type_declaration_1 == type_declaration_1) &&  (l_type_declaration_list_1 == type_declaration_list_1))
	    return this;
	else {
	    impl_type_declaration_list* kc_result= Constype_declaration_list(l_type_declaration_1, l_type_declaration_list_1);
	    kc_result->rewrite_members(this);
	    return kc_result;
	}   }
}

type_declaration impl_type_declaration_TypeDeclaration::rewrite(rview kc_current_view_base)
{
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    type_denoter l_type_denoter_1 =
	type_denoter_1->rewrite(kc_current_view_base);
    if ((l_casestring_1 == casestring_1) &&  (l_type_denoter_1 == type_denoter_1))
	return this;
    else {
	impl_type_declaration_TypeDeclaration* kc_result= TypeDeclaration(l_casestring_1, l_type_denoter_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

variable_declaration_list impl_variable_declaration_list::rewrite(rview kc_current_view_base)
{
    if (is_nil()) {
	return this;
    } else { // not Nil, Cons
	variable_declaration l_variable_declaration_1 =
	    variable_declaration_1->rewrite(kc_current_view_base);
	variable_declaration_list l_variable_declaration_list_1 =
	    variable_declaration_list_1->rewrite(kc_current_view_base);
	if ((l_variable_declaration_1 == variable_declaration_1) &&  (l_variable_declaration_list_1 == variable_declaration_list_1))
	    return this;
	else {
	    impl_variable_declaration_list* kc_result= Consvariable_declaration_list(l_variable_declaration_1, l_variable_declaration_list_1);
	    kc_result->rewrite_members(this);
	    return kc_result;
	}   }
}

variable_declaration impl_variable_declaration_VariableDeclaration::rewrite(rview kc_current_view_base)
{
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    type_denoter l_type_denoter_1 =
	type_denoter_1->rewrite(kc_current_view_base);
    if ((l_casestring_1 == casestring_1) &&  (l_type_denoter_1 == type_denoter_1))
	return this;
    else {
	impl_variable_declaration_VariableDeclaration* kc_result= VariableDeclaration(l_casestring_1, l_type_denoter_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

procedure_declaration impl_procedure_declaration_Procedure::rewrite(rview kc_current_view_base)
{
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    parameter_list l_parameter_list_1 =
	parameter_list_1->rewrite(kc_current_view_base);
    type_denoter l_type_denoter_1 =
	type_denoter_1->rewrite(kc_current_view_base);
    block l_block_1 =
	block_1->rewrite(kc_current_view_base);
    if ((l_casestring_1 == casestring_1) &&  (l_parameter_list_1 == parameter_list_1) &&  (l_type_denoter_1 == type_denoter_1) &&  (l_block_1 == block_1))
	return this;
    else {
	impl_procedure_declaration_Procedure* kc_result= Procedure(l_casestring_1, l_parameter_list_1, l_type_denoter_1, l_block_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

parameter_list impl_parameter_list::rewrite(rview kc_current_view_base)
{
    if (is_nil()) {
	return this;
    } else { // not Nil, Cons
	parameter l_parameter_1 =
	    parameter_1->rewrite(kc_current_view_base);
	parameter_list l_parameter_list_1 =
	    parameter_list_1->rewrite(kc_current_view_base);
	if ((l_parameter_1 == parameter_1) &&  (l_parameter_list_1 == parameter_list_1))
	    return this;
	else {
	    impl_parameter_list* kc_result= Consparameter_list(l_parameter_1, l_parameter_list_1);
	    kc_result->rewrite_members(this);
	    return kc_result;
	}   }
}

parameter impl_parameter_Parameter::rewrite(rview kc_current_view_base)
{
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    type_denoter l_type_denoter_1 =
	type_denoter_1->rewrite(kc_current_view_base);
    if ((l_casestring_1 == casestring_1) &&  (l_type_denoter_1 == type_denoter_1))
	return this;
    else {
	impl_parameter_Parameter* kc_result= Parameter(l_casestring_1, l_type_denoter_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

variable_designator impl_variable_designator_IndexedVariableDesignator::rewrite(rview kc_current_view_base)
{
    variable_designator l_variable_designator_1 =
	variable_designator_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_variable_designator_1 == variable_designator_1) &&  (l_expression_1 == expression_1))
	return this;
    else {
	impl_variable_designator_IndexedVariableDesignator* kc_result= IndexedVariableDesignator(l_variable_designator_1, l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

variable_designator impl_variable_designator_VariableDesignator::rewrite(rview kc_current_view_base)
{
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    if ((l_casestring_1 == casestring_1))
	return this;
    else {
	impl_variable_designator_VariableDesignator* kc_result= VariableDesignator(l_casestring_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

type_denoter impl_type_denoter_TypeArray::rewrite(rview kc_current_view_base)
{
    subrange l_subrange_1 =
	subrange_1->rewrite(kc_current_view_base);
    type_denoter l_type_denoter_1 =
	type_denoter_1->rewrite(kc_current_view_base);
    if ((l_subrange_1 == subrange_1) &&  (l_type_denoter_1 == type_denoter_1))
	return this;
    else {
	impl_type_denoter_TypeArray* kc_result= TypeArray(l_subrange_1, l_type_denoter_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

type_denoter impl_type_denoter_TypeChar::rewrite(rview kc_current_view_base)
{
    return this;

}

type_denoter impl_type_denoter_TypeReal::rewrite(rview kc_current_view_base)
{
    return this;

}

type_denoter impl_type_denoter_TypeInteger::rewrite(rview kc_current_view_base)
{
    return this;

}

type_denoter impl_type_denoter_TypeIdent::rewrite(rview kc_current_view_base)
{
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    if ((l_casestring_1 == casestring_1))
	return this;
    else {
	impl_type_denoter_TypeIdent* kc_result= TypeIdent(l_casestring_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

subrange impl_subrange_Subrange::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_subrange_Subrange* kc_result= Subrange(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

statement impl_statement_ForStatement::rewrite(rview kc_current_view_base)
{
    for_statement l_for_statement_1 =
	for_statement_1->rewrite(kc_current_view_base);
    if ((l_for_statement_1 == for_statement_1))
	return this;
    else {
	impl_statement_ForStatement* kc_result= ForStatement(l_for_statement_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

statement impl_statement_RepeatStatement::rewrite(rview kc_current_view_base)
{
    repeat_statement l_repeat_statement_1 =
	repeat_statement_1->rewrite(kc_current_view_base);
    if ((l_repeat_statement_1 == repeat_statement_1))
	return this;
    else {
	impl_statement_RepeatStatement* kc_result= RepeatStatement(l_repeat_statement_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

statement impl_statement_WhileStatement::rewrite(rview kc_current_view_base)
{
    while_statement l_while_statement_1 =
	while_statement_1->rewrite(kc_current_view_base);
    if ((l_while_statement_1 == while_statement_1))
	return this;
    else {
	impl_statement_WhileStatement* kc_result= WhileStatement(l_while_statement_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

statement impl_statement_IfStatement::rewrite(rview kc_current_view_base)
{
    if_statement l_if_statement_1 =
	if_statement_1->rewrite(kc_current_view_base);
    if ((l_if_statement_1 == if_statement_1))
	return this;
    else {
	impl_statement_IfStatement* kc_result= IfStatement(l_if_statement_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

statement impl_statement_ReturnStatement::rewrite(rview kc_current_view_base)
{
    return_statement l_return_statement_1 =
	return_statement_1->rewrite(kc_current_view_base);
    if ((l_return_statement_1 == return_statement_1))
	return this;
    else {
	impl_statement_ReturnStatement* kc_result= ReturnStatement(l_return_statement_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

statement impl_statement_FunctionCallStatement::rewrite(rview kc_current_view_base)
{
    function_call l_function_call_1 =
	function_call_1->rewrite(kc_current_view_base);
    if ((l_function_call_1 == function_call_1))
	return this;
    else {
	impl_statement_FunctionCallStatement* kc_result= FunctionCallStatement(l_function_call_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

statement impl_statement_AssignmentStatement::rewrite(rview kc_current_view_base)
{
    assignment_statement l_assignment_statement_1 =
	assignment_statement_1->rewrite(kc_current_view_base);
    if ((l_assignment_statement_1 == assignment_statement_1))
	return this;
    else {
	impl_statement_AssignmentStatement* kc_result= AssignmentStatement(l_assignment_statement_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

statement impl_statement_EmptyStatement::rewrite(rview kc_current_view_base)
{
    empty_statement l_empty_statement_1 =
	empty_statement_1->rewrite(kc_current_view_base);
    if ((l_empty_statement_1 == empty_statement_1))
	return this;
    else {
	impl_statement_EmptyStatement* kc_result= EmptyStatement(l_empty_statement_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

empty_statement impl_empty_statement_Empty::rewrite(rview kc_current_view_base)
{
    return this;

}

assignment_statement impl_assignment_statement_Assignment::rewrite(rview kc_current_view_base)
{
    variable_designator l_variable_designator_1 =
	variable_designator_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_variable_designator_1 == variable_designator_1) &&  (l_expression_1 == expression_1))
	return this;
    else {
	impl_assignment_statement_Assignment* kc_result= Assignment(l_variable_designator_1, l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

function_call impl_function_call_FunctionCall::rewrite(rview kc_current_view_base)
{
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    expression_list l_expression_list_1 =
	expression_list_1->rewrite(kc_current_view_base);
    if ((l_casestring_1 == casestring_1) &&  (l_expression_list_1 == expression_list_1))
	return this;
    else {
	impl_function_call_FunctionCall* kc_result= FunctionCall(l_casestring_1, l_expression_list_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

return_statement impl_return_statement_Return::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1))
	return this;
    else {
	impl_return_statement_Return* kc_result= Return(l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

if_statement impl_if_statement_If::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    statement_sequence l_statement_sequence_1 =
	statement_sequence_1->rewrite(kc_current_view_base);
    elsif_list l_elsif_list_1 =
	elsif_list_1->rewrite(kc_current_view_base);
    opt_else l_opt_else_1 =
	opt_else_1->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_statement_sequence_1 == statement_sequence_1) &&  (l_elsif_list_1 == elsif_list_1) &&  (l_opt_else_1 == opt_else_1))
	return this;
    else {
	impl_if_statement_If* kc_result= If(l_expression_1, l_statement_sequence_1, l_elsif_list_1, l_opt_else_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

elsif_list impl_elsif_list::rewrite(rview kc_current_view_base)
{
    if (is_nil()) {
	return this;
    } else { // not Nil, Cons
	elsif l_elsif_1 =
	    elsif_1->rewrite(kc_current_view_base);
	elsif_list l_elsif_list_1 =
	    elsif_list_1->rewrite(kc_current_view_base);
	if ((l_elsif_1 == elsif_1) &&  (l_elsif_list_1 == elsif_list_1))
	    return this;
	else {
	    impl_elsif_list* kc_result= Conselsif_list(l_elsif_1, l_elsif_list_1);
	    kc_result->rewrite_members(this);
	    return kc_result;
	}   }
}

elsif impl_elsif_Elsif::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    statement_sequence l_statement_sequence_1 =
	statement_sequence_1->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_statement_sequence_1 == statement_sequence_1))
	return this;
    else {
	impl_elsif_Elsif* kc_result= Elsif(l_expression_1, l_statement_sequence_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

opt_else impl_opt_else_Else::rewrite(rview kc_current_view_base)
{
    statement_sequence l_statement_sequence_1 =
	statement_sequence_1->rewrite(kc_current_view_base);
    if ((l_statement_sequence_1 == statement_sequence_1))
	return this;
    else {
	impl_opt_else_Else* kc_result= Else(l_statement_sequence_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

opt_else impl_opt_else_NoElse::rewrite(rview kc_current_view_base)
{
    return this;

}

while_statement impl_while_statement_While::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    statement_sequence l_statement_sequence_1 =
	statement_sequence_1->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_statement_sequence_1 == statement_sequence_1))
	return this;
    else {
	impl_while_statement_While* kc_result= While(l_expression_1, l_statement_sequence_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

repeat_statement impl_repeat_statement_Repeat::rewrite(rview kc_current_view_base)
{
    statement_sequence l_statement_sequence_1 =
	statement_sequence_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_statement_sequence_1 == statement_sequence_1) &&  (l_expression_1 == expression_1))
	return this;
    else {
	impl_repeat_statement_Repeat* kc_result= Repeat(l_statement_sequence_1, l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

for_statement impl_for_statement_For::rewrite(rview kc_current_view_base)
{
    variable_designator l_variable_designator_1 =
	variable_designator_1->rewrite(kc_current_view_base);
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    statement_sequence l_statement_sequence_1 =
	statement_sequence_1->rewrite(kc_current_view_base);
    if ((l_variable_designator_1 == variable_designator_1) &&  (l_expression_1 == expression_1) &&  (l_expression_2 == expression_2) &&  (l_statement_sequence_1 == statement_sequence_1))
	return this;
    else {
	impl_for_statement_For* kc_result= For(l_variable_designator_1, l_expression_1, l_expression_2, l_statement_sequence_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression_list impl_expression_list::rewrite(rview kc_current_view_base)
{
    if (is_nil()) {
	return this;
    } else { // not Nil, Cons
	expression l_expression_1 =
	    expression_1->rewrite(kc_current_view_base);
	expression_list l_expression_list_1 =
	    expression_list_1->rewrite(kc_current_view_base);
	if ((l_expression_1 == expression_1) &&  (l_expression_list_1 == expression_list_1))
	    return this;
	else {
	    impl_expression_list* kc_result= Consexpression_list(l_expression_1, l_expression_list_1);
	    kc_result->rewrite_members(this);
	    return kc_result;
	}   }
}

statement_sequence impl_statement_sequence::rewrite(rview kc_current_view_base)
{
    if (is_nil()) {
	return this;
    } else { // not Nil, Cons
	statement l_statement_1 =
	    statement_1->rewrite(kc_current_view_base);
	statement_sequence l_statement_sequence_1 =
	    statement_sequence_1->rewrite(kc_current_view_base);
	if ((l_statement_1 == statement_1) &&  (l_statement_sequence_1 == statement_sequence_1))
	    return this;
	else {
	    impl_statement_sequence* kc_result= Consstatement_sequence(l_statement_1, l_statement_sequence_1);
	    kc_result->rewrite_members(this);
	    return kc_result;
	}   }
}

expression impl_expression_And::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_expression_And* kc_result= And(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_Mod::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_expression_Mod* kc_result= Mod(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_Div::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_expression_Div* kc_result= Div(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_Slash::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_expression_Slash* kc_result= Slash(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_Asterisk::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_expression_Asterisk* kc_result= Asterisk(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_Or::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_expression_Or* kc_result= Or(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_Minus::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_expression_Minus* kc_result= Minus(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_Plus::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_expression_Plus* kc_result= Plus(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_Geq::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_expression_Geq* kc_result= Geq(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_Leq::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_expression_Leq* kc_result= Leq(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_Ge::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_expression_Ge* kc_result= Ge(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_Le::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_expression_Le* kc_result= Le(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_Ne::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_expression_Ne* kc_result= Ne(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_Eq::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    expression l_expression_2 =
	expression_2->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1) &&  (l_expression_2 == expression_2))
	return this;
    else {
	impl_expression_Eq* kc_result= Eq(l_expression_1, l_expression_2);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_ConstantLiteral::rewrite(rview kc_current_view_base)
{
    constant_literal l_constant_literal_1 =
	constant_literal_1->rewrite(kc_current_view_base);
    if ((l_constant_literal_1 == constant_literal_1))
	return this;
    else {
	impl_expression_ConstantLiteral* kc_result= ConstantLiteral(l_constant_literal_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_ExFunctionCall::rewrite(rview kc_current_view_base)
{
    function_call l_function_call_1 =
	function_call_1->rewrite(kc_current_view_base);
    if ((l_function_call_1 == function_call_1))
	return this;
    else {
	impl_expression_ExFunctionCall* kc_result= ExFunctionCall(l_function_call_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_ExVariableDesignator::rewrite(rview kc_current_view_base)
{
    variable_designator l_variable_designator_1 =
	variable_designator_1->rewrite(kc_current_view_base);
    if ((l_variable_designator_1 == variable_designator_1))
	return this;
    else {
	impl_expression_ExVariableDesignator* kc_result= ExVariableDesignator(l_variable_designator_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

expression impl_expression_Not::rewrite(rview kc_current_view_base)
{
    expression l_expression_1 =
	expression_1->rewrite(kc_current_view_base);
    if ((l_expression_1 == expression_1))
	return this;
    else {
	impl_expression_Not* kc_result= Not(l_expression_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

constant_literal impl_constant_literal_StringConstant::rewrite(rview kc_current_view_base)
{
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    if ((l_casestring_1 == casestring_1))
	return this;
    else {
	impl_constant_literal_StringConstant* kc_result= StringConstant(l_casestring_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

constant_literal impl_constant_literal_CharConstant::rewrite(rview kc_current_view_base)
{
    casestring l_casestring_1 =
	casestring_1->rewrite(kc_current_view_base);
    if ((l_casestring_1 == casestring_1))
	return this;
    else {
	impl_constant_literal_CharConstant* kc_result= CharConstant(l_casestring_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

constant_literal impl_constant_literal_RealConstant::rewrite(rview kc_current_view_base)
{
    real l_real_1 =
	real_1->rewrite(kc_current_view_base);
    if ((l_real_1 == real_1))
	return this;
    else {
	impl_constant_literal_RealConstant* kc_result= RealConstant(l_real_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

constant_literal impl_constant_literal_IntegerConstant::rewrite(rview kc_current_view_base)
{
    integer l_integer_1 =
	integer_1->rewrite(kc_current_view_base);
    if ((l_integer_1 == integer_1))
	return this;
    else {
	impl_constant_literal_IntegerConstant* kc_result= IntegerConstant(l_integer_1);
	kc_result->rewrite_members(this);
	return kc_result;
    }
}

} // namespace kc
