/* translation of file(s)
	"abstract.k"
	"unparse.k"
 */
/* generated by:
 *  @(#)$Author: Kimwitu++ version 2.3.13 (C) 1998-2008 Humboldt-Universitaet zu Berlin $
 */
#define KC_UNPARSE

#include <stdio.h>
#include <string>
#include <stdlib.h>
#include "k.h"
#include "unpk.h"


namespace kc {
base_uview_class base_uview;
C_class C;

impl_uviews uviews[] = {
    {"base_uview",&base_uview},
    {"C",&C},
    {0,0}
};

} // namespace kc

namespace kc {

#ifndef KC_TRACE_PROVIDED
#define KC_TRACE_PROVIDED(COND,FILE,LINE,NODE) COND
#endif

void
impl_abstract_phylum::unparse(printer_function opf, uview uv)
{
    printer_functor_function_wrapper pf(opf);
    do_unparse(pf, uv);
}

// Everything given as a pointer is expected to have an unparse-method (we
// believe it's a phylum), unless there's a specialisation for it

void
unparse(abstract_phylum kc_p, printer_functor kc_printer, uview kc_current_view)
{
    kc_p->unparse(kc_printer, kc_current_view);
}

void
unparse(void *kc_p, printer_functor kc_printer, uview kc_current_view)
{
    // MPi: 20020628 there shouldn't be any left
    assertionFailed("Unparse called for untyped pointer");
    // MPi: cast should be unnecessary, but there are still void*
    reinterpret_cast<impl_abstract_phylum*>(kc_p)->unparse(kc_printer, kc_current_view);
}

void
unparse(int kc_v, printer_functor kc_printer, uview kc_current_view)
{
    kc_char_t kc_string[200];
    kc_print_integer(kc_string, kc_v);
    kc_printer(kc_string, kc_current_view);
}

void
unparse(double kc_v, printer_functor kc_printer, uview kc_current_view)
{
    kc_char_t kc_string[200];
    kc_print_real(kc_string, kc_v);
    kc_printer(kc_string, kc_current_view);
}

void
unparse(kc_char_t *kc_v, printer_functor kc_printer, uview kc_current_view)
{
    kc_printer(kc_v, kc_current_view);
}

void
unparse(kc_string_t kc_v, printer_functor kc_printer, uview kc_current_view)
{
    kc_printer(kc_v.c_str(), kc_current_view);
}

#line  89 "unpk.cc"
void
impl_abstract_phylum::default_unparse(printer_functor kc_printer, uview kc_current_view)
{
    register int no_sons = operator_info[prod_sel()].no_sons;
    for (int i=0; i < no_sons; i++)
    subphylum(i)->unparse(kc_printer, kc_current_view);
}

void
impl_casestring__Str::do_unparse(printer_functor kc_printer, uview kc_current_view)
{
    kc::unparse(name, kc_printer, kc_current_view);
}

void
impl_nocasestring_NoCaseStr::do_unparse(printer_functor kc_printer, uview kc_current_view)
{
    kc::unparse(name, kc_printer, kc_current_view);
}

void
impl_integer__Int::do_unparse(printer_functor kc_printer, uview kc_current_view)
{
    kc::unparse(value, kc_printer, kc_current_view);
}

void
impl_real__Real::do_unparse(printer_functor kc_printer, uview kc_current_view)
{
    kc::unparse(value, kc_printer, kc_current_view);
}

void
impl_voidptr__VoidPtr::do_unparse(printer_functor kc_printer, uview kc_current_view)
{
    kc::unparse(pointer, kc_printer, kc_current_view);
}


#line  129 "unpk.cc"
void
impl_module_Module::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    if ((this->block_1->prod_sel() == sel_Block)) {
#line 3 "unparse.k"
		const casestring a = this->casestring_1;
#line 3 "unparse.k"
		const declaration_list b = phylum_cast<const impl_block_Block*>(this->block_1)->declaration_list_1;
#line 3 "unparse.k"
		const statement_sequence c = phylum_cast<const impl_block_Block*>(this->block_1)->statement_sequence_1;
		{ kc_printer(kc_t("/* compiled from module \""), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t("\" */ \n\n"), kc_current_view); }
		{ kc_printer(kc_t("/* global declarations */\n"), kc_current_view); }
		kc::unparse(b, kc_printer, kc_current_view);
		{ kc_printer(kc_t("\n/* main program */\n"), kc_current_view); }
		{ kc_printer(kc_t("int main() {\n"), kc_current_view); }
		kc::unparse(c, kc_printer, kc_current_view);
		{ kc_printer(kc_t("}"), kc_current_view); }
	    } else
		    goto kc_unparsing_default;
	    break;
	}

#line  157 "unpk.cc"
	default:
	kc_unparsing_default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  171 "unpk.cc"
void
impl_block_Block::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  177 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}

void
impl_declaration_list::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    if(is_nil())
	nil_do_unparse(kc_printer, kc_current_view_base);
    else
	switch(kc_current_view_base) {

#line  197 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		for (declaration_list iterator_ = this; iterator_->declaration_list_1 != 0; iterator_ = iterator_->declaration_list_1)
		    iterator_->declaration_1->unparse(kc_printer, kc_current_view);
	    }
	    break;
	}
    }
}

void
impl_declaration_list::nil_do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  215 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  227 "unpk.cc"
void
impl_declaration_ProcedureDeclaration::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  233 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  246 "unpk.cc"
void
impl_declaration_VariableDeclarationList::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  252 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  265 "unpk.cc"
void
impl_declaration_TypeDeclarationList::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  271 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  284 "unpk.cc"
void
impl_declaration_ConstantDeclarationList::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  290 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}

void
impl_constant_declaration_list::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    if(is_nil())
	nil_do_unparse(kc_printer, kc_current_view_base);
    else
	switch(kc_current_view_base) {

#line  310 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		for (constant_declaration_list iterator_ = this; iterator_->constant_declaration_list_1 != 0; iterator_ = iterator_->constant_declaration_list_1)
		    iterator_->constant_declaration_1->unparse(kc_printer, kc_current_view);
	    }
	    break;
	}
    }
}

void
impl_constant_declaration_list::nil_do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  328 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  340 "unpk.cc"
void
impl_constant_declaration_ConstantDeclaration::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
#line 13 "unparse.k"
		const casestring a = this->casestring_1;
#line 13 "unparse.k"
		const expression b = this->expression_1;
		{ kc_printer(kc_t("#define "), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t(" "), kc_current_view); }
		kc::unparse(b, kc_printer, kc_current_view);
		{ kc_printer(kc_t("\n"), kc_current_view); }
	    }
	    break;
	}

#line  361 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}

void
impl_type_declaration_list::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    if(is_nil())
	nil_do_unparse(kc_printer, kc_current_view_base);
    else
	switch(kc_current_view_base) {

#line  381 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		for (type_declaration_list iterator_ = this; iterator_->type_declaration_list_1 != 0; iterator_ = iterator_->type_declaration_list_1)
		    iterator_->type_declaration_1->unparse(kc_printer, kc_current_view);
	    }
	    break;
	}
    }
}

void
impl_type_declaration_list::nil_do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  399 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  411 "unpk.cc"
void
impl_type_declaration_TypeDeclaration::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
#line 17 "unparse.k"
		const casestring a = this->casestring_1;
#line 17 "unparse.k"
		const type_denoter b = this->type_denoter_1;
		{ kc_printer(kc_t("typedef "), kc_current_view); }
		kc::unparse(b, kc_printer, kc_current_view);
		{ kc_printer(kc_t(" "), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t(";\n"), kc_current_view); }
	    }
	    break;
	}

#line  432 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}

void
impl_variable_declaration_list::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    if(is_nil())
	nil_do_unparse(kc_printer, kc_current_view_base);
    else
	switch(kc_current_view_base) {

#line  452 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		for (variable_declaration_list iterator_ = this; iterator_->variable_declaration_list_1 != 0; iterator_ = iterator_->variable_declaration_list_1)
		    iterator_->variable_declaration_1->unparse(kc_printer, kc_current_view);
	    }
	    break;
	}
    }
}

void
impl_variable_declaration_list::nil_do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  470 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  482 "unpk.cc"
void
impl_variable_declaration_VariableDeclaration::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    if ((this->type_denoter_1->prod_sel() == sel_TypeArray)) {
#line 21 "unparse.k"
		const casestring a = this->casestring_1;
#line 21 "unparse.k"
		const subrange b = phylum_cast<const impl_type_denoter_TypeArray*>(this->type_denoter_1)->subrange_1;
#line 21 "unparse.k"
		const type_denoter c = phylum_cast<const impl_type_denoter_TypeArray*>(this->type_denoter_1)->type_denoter_1;
		kc::unparse(c, kc_printer, kc_current_view);
		{ kc_printer(kc_t(" "), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t("["), kc_current_view); }
		kc::unparse(b, kc_printer, kc_current_view);
		{ kc_printer(kc_t("];"), kc_current_view); }
	    } else
	    {
#line 23 "unparse.k"
		const casestring a = this->casestring_1;
#line 23 "unparse.k"
		const type_denoter b = this->type_denoter_1;
		kc::unparse(b, kc_printer, kc_current_view);
		{ kc_printer(kc_t(" "), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t(";\n"), kc_current_view); }
	    }
	    break;
	}

#line  516 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  529 "unpk.cc"
void
impl_procedure_declaration_Procedure::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    if ((this->block_1->prod_sel() == sel_Block)) {
#line 27 "unparse.k"
		const casestring a = this->casestring_1;
#line 27 "unparse.k"
		const parameter_list b = this->parameter_list_1;
#line 27 "unparse.k"
		const type_denoter c = this->type_denoter_1;
#line 27 "unparse.k"
		const declaration_list d = phylum_cast<const impl_block_Block*>(this->block_1)->declaration_list_1;
#line 27 "unparse.k"
		const statement_sequence e = phylum_cast<const impl_block_Block*>(this->block_1)->statement_sequence_1;
		{ kc_printer(kc_t("\n"), kc_current_view); }
		kc::unparse(c, kc_printer, kc_current_view);
		{ kc_printer(kc_t(" "), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t("("), kc_current_view); }
		kc::unparse(b, kc_printer, kc_current_view);
		{ kc_printer(kc_t(") {\n"), kc_current_view); }
		{ kc_printer(kc_t("/* "), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t("'s local declarations */\n"), kc_current_view); }
		kc::unparse(d, kc_printer, kc_current_view);
		{ kc_printer(kc_t("\n/* code */\n"), kc_current_view); }
		kc::unparse(e, kc_printer, kc_current_view);
		{ kc_printer(kc_t("}\n\n"), kc_current_view); }
	    } else
		    goto kc_unparsing_default;
	    break;
	}

#line  566 "unpk.cc"
	default:
	kc_unparsing_default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}

void
impl_parameter_list::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    if(is_nil())
	nil_do_unparse(kc_printer, kc_current_view_base);
    else
	switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    if ((this->parameter_list_1->prod_sel() == sel_Nilparameter_list)) {
#line 37 "unparse.k"
		const parameter a = this->parameter_1;
		kc::unparse(a, kc_printer, kc_current_view);
	    } else
		if ((this->parameter_list_1->prod_sel() == sel_Consparameter_list)) {
#line 38 "unparse.k"
		const parameter a = this->parameter_1;
#line 38 "unparse.k"
		const parameter_list b = this->parameter_list_1;
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t(", "), kc_current_view); }
		kc::unparse(b, kc_printer, kc_current_view);
	    } else
		    goto kc_unparsing_default;
	    break;
	}

#line  606 "unpk.cc"
	default:
	kc_unparsing_default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		for (parameter_list iterator_ = this; iterator_->parameter_list_1 != 0; iterator_ = iterator_->parameter_list_1)
		    iterator_->parameter_1->unparse(kc_printer, kc_current_view);
	    }
	    break;
	}
    }
}

void
impl_parameter_list::nil_do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  625 "unpk.cc"
	default:
	kc_unparsing_default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  638 "unpk.cc"
void
impl_parameter_Parameter::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
#line 40 "unparse.k"
		const casestring a = this->casestring_1;
#line 40 "unparse.k"
		const type_denoter b = this->type_denoter_1;
		kc::unparse(b, kc_printer, kc_current_view);
		{ kc_printer(kc_t(" "), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
	    }
	    break;
	}

#line  657 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  670 "unpk.cc"
void
impl_variable_designator_IndexedVariableDesignator::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
#line 42 "unparse.k"
		const variable_designator a = this->variable_designator_1;
#line 42 "unparse.k"
		const expression b = this->expression_1;
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t("["), kc_current_view); }
		kc::unparse(b, kc_printer, kc_current_view);
		{ kc_printer(kc_t("]"), kc_current_view); }
	    }
	    break;
	}

#line  690 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  703 "unpk.cc"
void
impl_variable_designator_VariableDesignator::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  709 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  722 "unpk.cc"
void
impl_type_denoter_TypeArray::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
#line 48 "unparse.k"
		const subrange a = this->subrange_1;
#line 48 "unparse.k"
		const type_denoter b = this->type_denoter_1;
		kc::unparse(b, kc_printer, kc_current_view);
		{ kc_printer(kc_t("["), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t("]"), kc_current_view); }
	    }
	    break;
	}

#line  742 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  755 "unpk.cc"
void
impl_type_denoter_TypeChar::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
		{ kc_printer(kc_t("char"), kc_current_view); }
	    }
	    break;
	}

#line  768 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  780 "unpk.cc"
void
impl_type_denoter_TypeReal::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
		{ kc_printer(kc_t("float"), kc_current_view); }
	    }
	    break;
	}

#line  793 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  805 "unpk.cc"
void
impl_type_denoter_TypeInteger::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
		{ kc_printer(kc_t("int"), kc_current_view); }
	    }
	    break;
	}

#line  818 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  830 "unpk.cc"
void
impl_type_denoter_TypeIdent::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
#line 44 "unparse.k"
		const casestring a = this->casestring_1;
		kc::unparse(a, kc_printer, kc_current_view);
	    }
	    break;
	}

#line  845 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  858 "unpk.cc"
void
impl_subrange_Subrange::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
#line 50 "unparse.k"
		const expression a = this->expression_1;
#line 50 "unparse.k"
		const expression b = this->expression_2;
		kc::unparse(b, kc_printer, kc_current_view);
		{ kc_printer(kc_t("-"), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
	    }
	    break;
	}

#line  877 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  890 "unpk.cc"
void
impl_statement_ForStatement::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  896 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  909 "unpk.cc"
void
impl_statement_RepeatStatement::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  915 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  928 "unpk.cc"
void
impl_statement_WhileStatement::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  934 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  947 "unpk.cc"
void
impl_statement_IfStatement::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  953 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  966 "unpk.cc"
void
impl_statement_ReturnStatement::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  972 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  985 "unpk.cc"
void
impl_statement_FunctionCallStatement::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  991 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1004 "unpk.cc"
void
impl_statement_AssignmentStatement::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  1010 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1023 "unpk.cc"
void
impl_statement_EmptyStatement::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  1029 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1042 "unpk.cc"
void
impl_empty_statement_Empty::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  1048 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  1060 "unpk.cc"
void
impl_assignment_statement_Assignment::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
#line 52 "unparse.k"
		const variable_designator a = this->variable_designator_1;
#line 52 "unparse.k"
		const expression b = this->expression_1;
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t(" = "), kc_current_view); }
		kc::unparse(b, kc_printer, kc_current_view);
	    }
	    break;
	}

#line  1079 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1092 "unpk.cc"
void
impl_function_call_FunctionCall::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
#line 56 "unparse.k"
		const casestring a = this->casestring_1;
#line 56 "unparse.k"
		const expression_list b = this->expression_list_1;
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t("("), kc_current_view); }
		kc::unparse(b, kc_printer, kc_current_view);
		{ kc_printer(kc_t(")"), kc_current_view); }
	    }
	    break;
	}

#line  1112 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1125 "unpk.cc"
void
impl_return_statement_Return::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
#line 60 "unparse.k"
		const expression a = this->expression_1;
		{ kc_printer(kc_t("return "), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
	    }
	    break;
	}

#line  1141 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1154 "unpk.cc"
void
impl_if_statement_If::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
#line 62 "unparse.k"
		const expression a = this->expression_1;
#line 62 "unparse.k"
		const statement_sequence b = this->statement_sequence_1;
#line 62 "unparse.k"
		const elsif_list c = this->elsif_list_1;
#line 62 "unparse.k"
		const opt_else d = this->opt_else_1;
		{ kc_printer(kc_t("if ("), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t(") {\n"), kc_current_view); }
		kc::unparse(b, kc_printer, kc_current_view);
		{ kc_printer(kc_t("} "), kc_current_view); }
		kc::unparse(c, kc_printer, kc_current_view);
		kc::unparse(d, kc_printer, kc_current_view);
	    }
	    break;
	}

#line  1181 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}

void
impl_elsif_list::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    if(is_nil())
	nil_do_unparse(kc_printer, kc_current_view_base);
    else
	switch(kc_current_view_base) {

#line  1201 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		for (elsif_list iterator_ = this; iterator_->elsif_list_1 != 0; iterator_ = iterator_->elsif_list_1)
		    iterator_->elsif_1->unparse(kc_printer, kc_current_view);
	    }
	    break;
	}
    }
}

void
impl_elsif_list::nil_do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  1219 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  1231 "unpk.cc"
void
impl_elsif_Elsif::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
#line 69 "unparse.k"
		const expression a = this->expression_1;
#line 69 "unparse.k"
		const statement_sequence b = this->statement_sequence_1;
		{ kc_printer(kc_t("else if ("), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t(") {\n"), kc_current_view); }
		kc::unparse(b, kc_printer, kc_current_view);
		{ kc_printer(kc_t("} "), kc_current_view); }
	    }
	    break;
	}

#line  1252 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1265 "unpk.cc"
void
impl_opt_else_Else::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
#line 71 "unparse.k"
		const statement_sequence a = this->statement_sequence_1;
		{ kc_printer(kc_t("else {\n"), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t("}"), kc_current_view); }
	    }
	    break;
	}

#line  1282 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1295 "unpk.cc"
void
impl_opt_else_NoElse::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  1301 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  1313 "unpk.cc"
void
impl_while_statement_While::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
#line 73 "unparse.k"
		const expression a = this->expression_1;
#line 73 "unparse.k"
		const statement_sequence b = this->statement_sequence_1;
		{ kc_printer(kc_t("while ("), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t(") {\n "), kc_current_view); }
		kc::unparse(b, kc_printer, kc_current_view);
		{ kc_printer(kc_t(" \n}"), kc_current_view); }
	    }
	    break;
	}

#line  1334 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1347 "unpk.cc"
void
impl_repeat_statement_Repeat::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
#line 75 "unparse.k"
		const statement_sequence a = this->statement_sequence_1;
#line 75 "unparse.k"
		const expression b = this->expression_1;
		{ kc_printer(kc_t("do {\n"), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t("\n} while (!"), kc_current_view); }
		kc::unparse(b, kc_printer, kc_current_view);
		{ kc_printer(kc_t(")"), kc_current_view); }
	    }
	    break;
	}

#line  1368 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1381 "unpk.cc"
void
impl_for_statement_For::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
#line 77 "unparse.k"
		const variable_designator a = this->variable_designator_1;
#line 77 "unparse.k"
		const expression b = this->expression_1;
#line 77 "unparse.k"
		const expression c = this->expression_2;
#line 77 "unparse.k"
		const statement_sequence d = this->statement_sequence_1;
		{ kc_printer(kc_t("for ("), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t(" = "), kc_current_view); }
		kc::unparse(b, kc_printer, kc_current_view);
		{ kc_printer(kc_t("; "), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t(" != "), kc_current_view); }
		kc::unparse(c, kc_printer, kc_current_view);
		{ kc_printer(kc_t("; "), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t(" = "), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t(" +1) {\n "), kc_current_view); }
		kc::unparse(d, kc_printer, kc_current_view);
		{ kc_printer(kc_t(" \n}"), kc_current_view); }
	    }
	    break;
	}

#line  1416 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}

void
impl_expression_list::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    if(is_nil())
	nil_do_unparse(kc_printer, kc_current_view_base);
    else
	switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    if ((this->expression_list_1->prod_sel() == sel_Nilexpression_list)) {
#line 79 "unparse.k"
		const expression a = this->expression_1;
		kc::unparse(a, kc_printer, kc_current_view);
	    } else
		if ((this->expression_list_1->prod_sel() == sel_Consexpression_list)) {
#line 80 "unparse.k"
		const expression a = this->expression_1;
#line 80 "unparse.k"
		const expression_list b = this->expression_list_1;
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t(", "), kc_current_view); }
		kc::unparse(b, kc_printer, kc_current_view);
	    } else
		    goto kc_unparsing_default;
	    break;
	}

#line  1455 "unpk.cc"
	default:
	kc_unparsing_default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		for (expression_list iterator_ = this; iterator_->expression_list_1 != 0; iterator_ = iterator_->expression_list_1)
		    iterator_->expression_1->unparse(kc_printer, kc_current_view);
	    }
	    break;
	}
    }
}

void
impl_expression_list::nil_do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  1474 "unpk.cc"
	default:
	kc_unparsing_default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}

void
impl_statement_sequence::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    if(is_nil())
	nil_do_unparse(kc_printer, kc_current_view_base);
    else
	switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    if ((this->statement_sequence_1->prod_sel() == sel_Nilstatement_sequence)) {
#line 82 "unparse.k"
		const statement a = this->statement_1;
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t(";\n"), kc_current_view); }
	    } else
		if ((this->statement_sequence_1->prod_sel() == sel_Consstatement_sequence)) {
#line 83 "unparse.k"
		const statement a = this->statement_1;
#line 83 "unparse.k"
		const statement_sequence b = this->statement_sequence_1;
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t(";\n"), kc_current_view); }
		kc::unparse(b, kc_printer, kc_current_view);
	    } else
		    goto kc_unparsing_default;
	    break;
	}

#line  1514 "unpk.cc"
	default:
	kc_unparsing_default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		for (statement_sequence iterator_ = this; iterator_->statement_sequence_1 != 0; iterator_ = iterator_->statement_sequence_1)
		    iterator_->statement_1->unparse(kc_printer, kc_current_view);
	    }
	    break;
	}
    }
}

void
impl_statement_sequence::nil_do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  1533 "unpk.cc"
	default:
	kc_unparsing_default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
	    }
	    break;
	}
    }
}


#line  1546 "unpk.cc"
void
impl_expression_And::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
#line 99 "unparse.k"
		const expression a = this->expression_1;
#line 99 "unparse.k"
		const expression b = this->expression_2;
		{ kc_printer(kc_t("("), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t(" && "), kc_current_view); }
		kc::unparse(b, kc_printer, kc_current_view);
		{ kc_printer(kc_t(")"), kc_current_view); }
	    }
	    break;
	}

#line  1567 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1580 "unpk.cc"
void
impl_expression_Mod::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
#line 98 "unparse.k"
		const expression a = this->expression_1;
#line 98 "unparse.k"
		const expression b = this->expression_2;
		{ kc_printer(kc_t("("), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t(" % "), kc_current_view); }
		kc::unparse(b, kc_printer, kc_current_view);
		{ kc_printer(kc_t(")"), kc_current_view); }
	    }
	    break;
	}

#line  1601 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1614 "unpk.cc"
void
impl_expression_Div::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
#line 97 "unparse.k"
		const expression a = this->expression_1;
#line 97 "unparse.k"
		const expression b = this->expression_2;
		{ kc_printer(kc_t("("), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t(" / "), kc_current_view); }
		kc::unparse(b, kc_printer, kc_current_view);
		{ kc_printer(kc_t(")"), kc_current_view); }
	    }
	    break;
	}

#line  1635 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1648 "unpk.cc"
void
impl_expression_Slash::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
#line 96 "unparse.k"
		const expression a = this->expression_1;
#line 96 "unparse.k"
		const expression b = this->expression_2;
		{ kc_printer(kc_t("("), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t(" / "), kc_current_view); }
		kc::unparse(b, kc_printer, kc_current_view);
		{ kc_printer(kc_t(")"), kc_current_view); }
	    }
	    break;
	}

#line  1669 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1682 "unpk.cc"
void
impl_expression_Asterisk::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
#line 95 "unparse.k"
		const expression a = this->expression_1;
#line 95 "unparse.k"
		const expression b = this->expression_2;
		{ kc_printer(kc_t("("), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t(" * "), kc_current_view); }
		kc::unparse(b, kc_printer, kc_current_view);
		{ kc_printer(kc_t(")"), kc_current_view); }
	    }
	    break;
	}

#line  1703 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1716 "unpk.cc"
void
impl_expression_Or::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
#line 94 "unparse.k"
		const expression a = this->expression_1;
#line 94 "unparse.k"
		const expression b = this->expression_2;
		{ kc_printer(kc_t("("), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t(" || "), kc_current_view); }
		kc::unparse(b, kc_printer, kc_current_view);
		{ kc_printer(kc_t(")"), kc_current_view); }
	    }
	    break;
	}

#line  1737 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1750 "unpk.cc"
void
impl_expression_Minus::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
#line 93 "unparse.k"
		const expression a = this->expression_1;
#line 93 "unparse.k"
		const expression b = this->expression_2;
		{ kc_printer(kc_t("("), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t(" - "), kc_current_view); }
		kc::unparse(b, kc_printer, kc_current_view);
		{ kc_printer(kc_t(")"), kc_current_view); }
	    }
	    break;
	}

#line  1771 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1784 "unpk.cc"
void
impl_expression_Plus::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
#line 92 "unparse.k"
		const expression a = this->expression_1;
#line 92 "unparse.k"
		const expression b = this->expression_2;
		{ kc_printer(kc_t("("), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t(" + "), kc_current_view); }
		kc::unparse(b, kc_printer, kc_current_view);
		{ kc_printer(kc_t(")"), kc_current_view); }
	    }
	    break;
	}

#line  1805 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1818 "unpk.cc"
void
impl_expression_Geq::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
#line 91 "unparse.k"
		const expression a = this->expression_1;
#line 91 "unparse.k"
		const expression b = this->expression_2;
		{ kc_printer(kc_t("("), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t(" >= "), kc_current_view); }
		kc::unparse(b, kc_printer, kc_current_view);
		{ kc_printer(kc_t(")"), kc_current_view); }
	    }
	    break;
	}

#line  1839 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1852 "unpk.cc"
void
impl_expression_Leq::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
#line 90 "unparse.k"
		const expression a = this->expression_1;
#line 90 "unparse.k"
		const expression b = this->expression_2;
		{ kc_printer(kc_t("("), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t(" <= "), kc_current_view); }
		kc::unparse(b, kc_printer, kc_current_view);
		{ kc_printer(kc_t(")"), kc_current_view); }
	    }
	    break;
	}

#line  1873 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1886 "unpk.cc"
void
impl_expression_Ge::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
#line 89 "unparse.k"
		const expression a = this->expression_1;
#line 89 "unparse.k"
		const expression b = this->expression_2;
		{ kc_printer(kc_t("("), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t(" > "), kc_current_view); }
		kc::unparse(b, kc_printer, kc_current_view);
		{ kc_printer(kc_t(")"), kc_current_view); }
	    }
	    break;
	}

#line  1907 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1920 "unpk.cc"
void
impl_expression_Le::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
#line 88 "unparse.k"
		const expression a = this->expression_1;
#line 88 "unparse.k"
		const expression b = this->expression_2;
		{ kc_printer(kc_t("("), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t(" < "), kc_current_view); }
		kc::unparse(b, kc_printer, kc_current_view);
		{ kc_printer(kc_t(")"), kc_current_view); }
	    }
	    break;
	}

#line  1941 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1954 "unpk.cc"
void
impl_expression_Ne::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
#line 87 "unparse.k"
		const expression a = this->expression_1;
#line 87 "unparse.k"
		const expression b = this->expression_2;
		{ kc_printer(kc_t("("), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t(" != "), kc_current_view); }
		kc::unparse(b, kc_printer, kc_current_view);
		{ kc_printer(kc_t(")"), kc_current_view); }
	    }
	    break;
	}

#line  1975 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  1988 "unpk.cc"
void
impl_expression_Eq::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
#line 86 "unparse.k"
		const expression a = this->expression_1;
#line 86 "unparse.k"
		const expression b = this->expression_2;
		{ kc_printer(kc_t("("), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t(" == "), kc_current_view); }
		kc::unparse(b, kc_printer, kc_current_view);
		{ kc_printer(kc_t(")"), kc_current_view); }
	    }
	    break;
	}

#line  2009 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  2022 "unpk.cc"
void
impl_expression_ConstantLiteral::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  2028 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  2041 "unpk.cc"
void
impl_expression_ExFunctionCall::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  2047 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  2060 "unpk.cc"
void
impl_expression_ExVariableDesignator::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  2066 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  2079 "unpk.cc"
void
impl_expression_Not::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
#line 85 "unparse.k"
		const expression a = this->expression_1;
		{ kc_printer(kc_t("!"), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
	    }
	    break;
	}

#line  2095 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  2108 "unpk.cc"
void
impl_constant_literal_StringConstant::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
#line 102 "unparse.k"
		const casestring a = this->casestring_1;
		{ kc_printer(kc_t("\""), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t("\""), kc_current_view); }
	    }
	    break;
	}

#line  2125 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  2138 "unpk.cc"
void
impl_constant_literal_CharConstant::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {
	case C_enum: {
	    C_class& kc_current_view=static_cast<C_class&>(kc_current_view_base);
	    {
#line 101 "unparse.k"
		const casestring a = this->casestring_1;
		{ kc_printer(kc_t("'"), kc_current_view); }
		kc::unparse(a, kc_printer, kc_current_view);
		{ kc_printer(kc_t("'"), kc_current_view); }
	    }
	    break;
	}

#line  2155 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  2168 "unpk.cc"
void
impl_constant_literal_RealConstant::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  2174 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


#line  2187 "unpk.cc"
void
impl_constant_literal_IntegerConstant::do_unparse(printer_functor kc_printer, uview kc_current_view_base)
{
    switch(kc_current_view_base) {

#line  2193 "unpk.cc"
	default:
	case base_uview_enum: {
	    uview kc_current_view=kc_current_view_base;
	    {
		default_unparse(kc_printer, kc_current_view );
	    }
	    break;
	}
    }
}


} // namespace kc
