/* translation of file(s)
	"abstract.k"
	"unparse.k"
 */
/* generated by:
 *  @(#)$Author: Kimwitu++ version 2.3.13 (C) 1998-2008 Humboldt-Universitaet zu Berlin $
 */
#ifndef KC_REWRITE_HEADER
#define KC_REWRITE_HEADER


namespace kc {

typedef enum {
    base_rview_enum,
    last_rview
} rview_enum;

struct impl_rviews {
    const char *name;
    rview_class *view;
};
extern struct impl_rviews rviews[];
class rview_class {
protected:
    // only used in derivations
    rview_class(rview_enum v): m_view(v) { }
    rview_class(const rview_class&): m_view(base_rview_enum)
	{ /* do not copy m_view */ }
public:
    const char* name() const
	{ return rviews[m_view].name; }
    operator rview_enum() const
	{ return m_view; }
    bool operator==(const rview_class& other) const
	{ return m_view == other.m_view; }
private:
    rview_enum m_view;
};

/* Use rviews instead
extern char *kc_rview_names[];
*/
struct base_rview_class: rview_class {
    base_rview_class():rview_class(base_rview_enum){}
};
extern base_rview_class base_rview;

} // namespace kc
#endif // KC_REWRITE_HEADER
