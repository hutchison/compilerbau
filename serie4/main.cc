/*!
\file
\brief implementation the main function of Moco
\note This file probably does not need to be changed.
*/

#include <cstdio>
#include "diagnosis.h"
#include "scanner.h"
#include "parser.h"
#include "symboltable.h"

/*!
\brief The main workflow of Moco.

This function evaluates the command line, opens input and output files as
necessary and calls the parser generated by Bison (which in turn communicates
with the lexer generated by Flex). Then, the information on the identifiers
are printed to #yyout. Finally all files are closed and memory is released.

\param[in] argc  The number of command line parameters.
\param[in] argv  The command line parameters.
*/
int main(int argc, char* argv[]) {
    // initialize global variables
    yyin = stdin;
    yyout = stdout;

    // process command line parameters for input and output
    if (argc > 3) {
        yyerror("wrong number of parameters");
    }
    if (argc > 1) {
        // store the name of the input file
        filename = argv[1];
        yyin = fopen(argv[1], "r");
        if (yyin == NULL) {
            yyerror("cannot open file for reading");
        }
    }
    if (argc > 2) {
        yyout = fopen(argv[2], "w");
        if (yyout == NULL) {
            yyerror("cannot open file for writing");
        }
    }

    // start the parser
    yyparse();

    // print the identifiers
    Identifier::print(yyout);

    // tidy up
    fclose(yyin);
    fclose(yyout);
    yylex_destroy();
    SymbolTable::destroy();

    return 0;
}
